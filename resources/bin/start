#!/bin/bash
set -e

[ ! -z "${PHP_MEMORY_LIMIT}" ]         && sed -i "s/PHP_MEMORY_LIMIT/${PHP_MEMORY_LIMIT}/" /usr/local/etc/php/php.ini
[ ! -z "${PHP_SENDMAIL_PATH}" ]        && sed -i "s#PHP_SENDMAIL_PATH#${PHP_SENDMAIL_PATH}#" /usr/local/etc/php/php.ini
[ ! -z "${PHP_PORT}" ]                 && sed -i "s/PHP_PORT/${PHP_PORT}/" /usr/local/etc/php-fpm.conf
[ ! -z "${PHP_PM_MAX_CHILDREN}" ]      && sed -i "s/PHP_PM_MAX_CHILDREN/${PHP_PM_MAX_CHILDREN}/" /usr/local/etc/php-fpm.conf
[ ! -z "${PHP_PM_START_SERVERS}" ]     && sed -i "s/PHP_PM_START_SERVERS/${PHP_PM_START_SERVERS}/" /usr/local/etc/php-fpm.conf
[ ! -z "${PHP_PM_MIN_SPARE_SERVERS}" ] && sed -i "s/PHP_PM_MIN_SPARE_SERVERS/${PHP_PM_MIN_SPARE_SERVERS}/" /usr/local/etc/php-fpm.conf
[ ! -z "${PHP_PM_MAX_SPARE_SERVERS}" ] && sed -i "s/PHP_PM_MAX_SPARE_SERVERS/${PHP_PM_MAX_SPARE_SERVERS}/" /usr/local/etc/php-fpm.conf
[ ! -z "${APP_MAGE_MODE}" ]            && sed -i "s/APP_MAGE_MODE/${APP_MAGE_MODE}/" /usr/local/etc/php-fpm.conf

sed -i "s#SSMTP_ROOT#${SSMTP_ROOT}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_MAILHUB#${SSMTP_MAILHUB}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_HOSTNAME#${SSMTP_HOSTNAME}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_USE_STARTTLS#${SSMTP_USE_STARTTLS}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_AUTHUSER#${SSMTP_AUTHUSER}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_AUTHPASS#${SSMTP_AUTHPASS}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_AUTHMETHOD#${SSMTP_AUTHMETHOD}#" /etc/ssmtp/ssmtp.conf
sed -i "s#SSMTP_FROM_LINE_OVERRIDE#${SSMTP_FROM_LINE_OVERRIDE}#" /etc/ssmtp/ssmtp.conf



sed -i "s#GITHUB_OAUTH_TOKEN#${GITHUB_OAUTH_TOKEN}#" /home/composer/auth.json
sed -i "s#MAGENTO_REP_USERNAME#${MAGENTO_REP_USERNAME}#" /home/composer/auth.json
sed -i "s#MAGENTO_REP_PASSWORD#${MAGENTO_REP_PASSWORD}#" /home/composer/auth.json



# Print all the variables so it's possible to debug ..

echo "WEBSITE_UNSECURE_URL: ${WEBSITE_UNSECURE_URL}"
echo "WEBSITE_SECURE_URL: ${WEBSITE_SECURE_URL}"

echo "GITHUB_OAUTH_TOKEN: ${GITHUB_OAUTH_TOKEN}"
echo "MAGENTO_REP_USERNAME: ${MAGENTO_REP_USERNAME}"
echo "MAGENTO_REP_PASSWORD: xxxxx"


echo "PHP_SENDMAIL_PATH: ${PHP_SENDMAIL_PATH}"
echo "RDS_HOSTNAME: ${RDS_HOSTNAME}"
echo "RDS_DB_NAME: ${RDS_DB_NAME}"
echo "RDS_USERNAME: ${RDS_USERNAME}"
echo "RDS_PASSWORD: xxxxx"
echo "MAGENTO_BACKEND_FRONTNAME: ${MAGENTO_BACKEND_FRONTNAME}"
echo "MAGENTO_LANGUAGE: ${MAGENTO_LANGUAGE}"
echo "MAGENTO_TIMEZONE: ${MAGENTO_TIMEZONE}"
echo "MAGENTO_CURRENCY: ${MAGENTO_CURRENCY}"
echo "MAGENTO_ADMIN_FIRSTNAME: ${MAGENTO_ADMIN_FIRSTNAME}"
echo "MAGENTO_ADMIN_LASTNAME: ${MAGENTO_ADMIN_LASTNAME}"
echo "MAGENTO_ADMIN_EMAIL: ${MAGENTO_ADMIN_EMAIL}"
echo "MAGENTO_ADMIN_USERNAME: ${MAGENTO_ADMIN_USERNAME}"
echo "MAGENTO_ADMIN_PASSWORD: xxxxx"
echo "MAGENTO_USE_REWRITES: ${MAGENTO_USE_REWRITES}"
echo "WEBSITE_SECURE_URL: ${WEBSITE_SECURE_URL}"
echo "WEBSITE_UNSECURE_URL: ${WEBSITE_UNSECURE_URL}"


echo "MEDIA_S3_ACCESS_KEY: ${MEDIA_S3_ACCESS_KEY}"
echo "MEDIA_S3_SECRET_KEY: xxxxx"
echo "MEDIA_S3_BUCKET: ${MEDIA_S3_BUCKET}"
echo "MEDIA_S3_REGION: ${MEDIA_S3_REGION}"
echo "MEDIA_S3_WEBSITE_URL: ${MEDIA_S3_WEBSITE_URL}"
echo "MEDIA_S3_SECURE_URL: ${MEDIA_S3_SECURE_URL}"


echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
echo "AWS_SECRET_ACCESS_KEY: xxxxxxx"
echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"


echo "ELASTICACHE_CONNECTION: ${ELASTICACHE_CONNECTION}"


echo "SSMTP_ROOT: ${SSMTP_ROOT}"
echo "SSMTP_MAILHUB: ${SSMTP_MAILHUB}"
echo "SSMTP_HOSTNAME: ${SSMTP_HOSTNAME}"
echo "SSMTP_USE_STARTTLS: ${SSMTP_USE_STARTTLS}"
echo "SSMTP_AUTHUSER: ${SSMTP_AUTHUSER}"
echo "SSMTP_AUTHPASS: xxxxx"
echo "SSMTP_AUTHMETHOD: ${SSMTP_AUTHMETHOD}"
echo "SSMTP_FROM_LINE_OVERRIDE: ${SSMTP_FROM_LINE_OVERRIDE}"

echo "AVOID_COMPOSER: ${AVOID_COMPOSER}"

# Make sure this line comes last, otherwise find/replace will replace above vars
[ ! -z "${PHP_PM}" ]                   && sed -i "s/PHP_PM/${PHP_PM}/" /usr/local/etc/php-fpm.conf


if [ -z "${AVOID_COMPOSER}" ]; then
    chown -R www-data:www-data /var/www
    chown -R www-data:www-data /src
    chown -R www-data:www-data /home/composer
    
    # clearning composer cache is a bad thing because deployments takes much longer
    # however  because of the way oauth token for bitbucket private repos are cached and token will expire
    # we clear the cache. This is bitbucket specific issue.
    # see https://github.com/composer/composer/issues/5389#issuecomment-224891791
    su -c "composer clearcache" -s /bin/sh www-data
    
    su -c "composer install --optimize-autoloader --prefer-dist" -s /bin/sh www-data

    if [ ! -f /src/composer.lock ]; then
        echo "Could not find /src/composer.lock. Did you map Magento root folder (containing composer.json) to docker container /src folder? Example: docker run .. -v /var/www/html/magento:/src"
        exit 1
    fi
fi

su -c "/usr/local/bin/setup-config" -s /bin/sh www-data


if [ -d /src/bin ] && [ ! -f /src/bin/magento-php ]; then
  mv /src/bin/magento /src/bin/magento-php
  cp /usr/local/bin/magento /src/bin/
fi



chown -R www-data:www-data /src
chmod +x /src/bin/magento
chmod +x /src/bin/magento-php


echo "Running magento setup:install"
/src/bin/magento setup:install \
      --db-host="${RDS_HOSTNAME}" \
      --db-name="${RDS_DB_NAME}" \
      --db-user="${RDS_USERNAME}" \
      --db-password="${RDS_PASSWORD}" \
      --backend-frontname="${MAGENTO_BACKEND_FRONTNAME}" \
      --language="${MAGENTO_LANGUAGE}" \
      --timezone="${MAGENTO_TIMEZONE}" \
      --currency="${MAGENTO_CURRENCY}" \
      --admin-lastname="${MAGENTO_ADMIN_LASTNAME}"\
      --admin-firstname="${MAGENTO_ADMIN_FIRSTNAME}" \
      --admin-email="${MAGENTO_ADMIN_EMAIL}" \
      --admin-user="${MAGENTO_ADMIN_USERNAME}" \
      --admin-password="${MAGENTO_ADMIN_PASSWORD}" \
      --use-rewrites="${MAGENTO_USE_REWRITES}"




echo "Creating docker_varnish_hosts table if not exist."
mysql -u "${RDS_USERNAME}" -p"${RDS_PASSWORD}" -h "${RDS_HOSTNAME}" -P "${RDS_PORT}" "${RDS_DB_NAME}" -e 'CREATE TABLE IF NOT EXISTS `docker_varnish_hosts` ( `hostname` varchar(700) NOT NULL, `last_checked` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`hostname`), UNIQUE KEY `hostname` (`hostname`) )'


echo "DI Compliation"
/src/bin/magento setup:di:compile 

echo "Enabling S3 assets module"
/src/bin/magento module:enable Arkade_S3


echo "Running magento replace env vars"
chmod +x /usr/local/bin/magento-replace-env-vars
APP_DIR=/src MEDIA_S3_ACCESS_KEY="${MEDIA_S3_ACCESS_KEY}"  MEDIA_S3_SECRET_KEY="${MEDIA_S3_SECRET_KEY}" \
 MEDIA_S3_BUCKET="${MEDIA_S3_BUCKET}"  MEDIA_S3_REGION="${MEDIA_S3_REGION}" \
 ELASTICACHE_CONNECTION="${ELASTICACHE_CONNECTION}" \
 WEBSITE_UNSECURE_URL="${WEBSITE_UNSECURE_URL}" WEBSITE_SECURE_URL="${WEBSITE_SECURE_URL}" \
 RDS_USERNAME="${RDS_USERNAME}" RDS_PASSWORD="${RDS_PASSWORD}" RDS_HOSTNAME="${RDS_HOSTNAME}" RDS_PORT="${RDS_PORT}" RDS_DB_NAME="${RDS_DB_NAME}" \
 MEDIA_S3_WEBSITE_URL="${MEDIA_S3_WEBSITE_URL}" MEDIA_S3_SECURE_URL="${MEDIA_S3_SECURE_URL}" \
 AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
 /usr/local/bin/magento-replace-env-vars

echo "Setup upgrade"
/src/bin/magento setup:upgrade

echo "Clearing cache"
/src/bin/magento cache:clean
/src/bin/magento cache:flush



echo "Running full reindex"
/src/bin/magento indexer:reindex

echo "Deploying static files"
chown -R www-data:www-data /src
chmod -R 0777 /src
/src/bin/magento setup:static-content:deploy "${MAGENTO_LANGUAGE} en_US"


echo "Correcting permissions"
chown -R www-data:www-data /src
chmod -R 0777 /src


# Only start php-fpm if successful ...
if [ -f /src/app/etc/env.php ]; then
   echo "Starting the cron service"
   /usr/sbin/cron

   echo "Starting php-fpm"
    /usr/local/sbin/php-fpm
else
    echo "ERROR: could not find /src/composer.lock in magento php container.... Did you mount magento root dir as a volume to /src? You should..."
fi
v
